/* * $Id: JnnConstantsTest.java,v 1.4 2004-02-16 10:48:09 tom Exp $ * * Copyright (C) 2002,2003  by Brockmann Consult (info@brockmann-consult.de) * * This program is free software; you can redistribute it and/or modify it * under the terms of the GNU General Public License as published by the * Free Software Foundation. This program is distributed in the hope it will * be useful, but WITHOUT ANY WARRANTY; without even the implied warranty * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. * See the GNU General Public License for more details. */package com.bc.jnn;import junit.framework.TestCase;import junit.framework.Test;import junit.framework.TestSuite;public class JnnConstantsTest extends TestCase {    public JnnConstantsTest(String testName) {        super(testName);    }    public static Test suite() {        return new TestSuite(JnnConstantsTest.class);    }    /**     * Tests all constants conneted to the file format and versioning for correctness     */    public void testFileFormatConstants() {        assertEquals(1, JnnConstants.NN_VERSION_MAJOR);        assertEquals(0, JnnConstants.NN_VERSION_MINOR);        assertEquals("NET\0", JnnConstants.NN_NET_SECTION_ID);        assertEquals("LAY\0", JnnConstants.NN_LAYER_SECTION_ID);        assertEquals("UNI\0", JnnConstants.NN_UNIT_SECTION_ID);        assertEquals("CON\0", JnnConstants.NN_CONN_SECTION_ID);        assertEquals("MAT\0", JnnConstants.NN_MATRIX_SECTION_ID);    }    /**     * Tests library global constants.     */    public void testGeneralConstants() {        assertEquals(4, JnnConstants.NN_PREC_SINGLE);        assertEquals(8, JnnConstants.NN_PREC_DOUBLE);        assertEquals(-1, JnnConstants.NN_NOT_SET);    }    /**     * Tests the constants for the function codes for correctness     */    public void testFunctionConstants() {        assertEquals(-1, JnnConstants.NN_FUNC_UNDEFINED);        assertEquals(0, JnnConstants.NN_FUNC_ZERO);        assertEquals(1, JnnConstants.NN_FUNC_IDENTITY);        assertEquals(10, JnnConstants.NN_FUNC_THRESHOLD);        assertEquals(11, JnnConstants.NN_FUNC_LINEAR);        assertEquals(12, JnnConstants.NN_FUNC_SEMILINEAR);        assertEquals(13, JnnConstants.NN_FUNC_EXPONENTIAL);        assertEquals(14, JnnConstants.NN_FUNC_LOGARITHMIC);        assertEquals(20, JnnConstants.NN_FUNC_SIGMOID_1);        assertEquals(21, JnnConstants.NN_FUNC_SIGMOID_2);        assertEquals(22, JnnConstants.NN_FUNC_TANG_SIGMOID);        assertEquals(30, JnnConstants.NN_FUNC_RBF_1);        assertEquals(31, JnnConstants.NN_FUNC_RBF_2);        assertEquals(40, JnnConstants.NN_FUNC_SUM_1);        assertEquals(41, JnnConstants.NN_FUNC_SUM_2);    }}